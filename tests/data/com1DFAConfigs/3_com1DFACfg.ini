### Config File - This file contains the main settings for the simulation run
## Copy to  local_com1DFACfg.ini and set you parameters
# This file is part of Avaframe.


[GENERAL]
#++++++++++++++++ Simulation type
# list of simulations that shall be performed (null, ent, res, entres, available (use all available input data))
simTypeList = ent
# model type - only for file naming (dfa - dense flow avalanche)
modelType = dfa

#+++++++++++++ Output++++++++++++
# desired result Parameters (ppr, pft, pfv, pta, FT, FV, P, FM, Vx, Vy, Vz, TA, particles) - separated by |
resType = ppr|pft|pfv
# saving time step, i.e.  time in seconds (first and last time step are always saved)
# option 1: give an interval with start:interval in seconds (tStep = 0:5 - this will save desired results every 5 seconds for the full simulation)
# option 2: explicitly list all desired time steps (closest to actual computational time step) separated by | (example tSteps = 1|50.2|100)
# NOTE: initial and last time step are always saved!
tSteps = 1

#++++++++++++++++ particle Initialisation +++++++++
# initial particle distribution, options: random, semirandom, uniform, triangular
# random: particles are random distributed
# uniform: particles are uniformly distributed on a square grid
# semirandom: particles are uniformly distributed with a little random variation
# triangular: particles are uniformly distributed on a regular triangular mesh
initPartDistType = random
# if true use file (import particles initial distribution from file)
initialiseParticlesFromFile = False
particleFile =
# seed for random generator
seed = 12345
# particle initialisation step - set iniStep to True to activate redistribution of particles to reduce SPH force
# this is in a development stage - hence parameters are set for development and will be adjusted after extensive testing
iniStep = False
saveParticlesIni = False
# artificial viscosity for initialisation parameter
subgridMixingFactorIni = 10.
# time step for initialisation
dtIni = 0.1
# sphOption for ini
sphOptionIni = 2
# stop criterion value for initialisation
stopCritIni = 0.1
# stop criterion value for initialisation if SPHforce < 1 from the outset;  ratio from oldValue to currentValue
stopCritIniSmall = 1.001
# max number of iterations - high number might cause significant increase in computational time
maxIterations = 100
# buffer zone factor multiplied with sphKernelRadius
bufferZoneFactor = 4
# in addition to the actual release line initialize additionallyFixedFactor*sphKernelRadius*bufferZoneFactor
# as particles that are not fixed - so that fixed boundaries do not affect the interior of the release particles
additionallyFixedFactor = 0.275
# Resetting the mass when relThField is provided: 1) ftOptionIni = False; using the mass of each cell
# and the particles within the cell (mPart = massCell/nPartPerCell) 2) ftOptionIni = True; by first computing the particles'
# flow thickness (interpolation of the relThField) and then particles' mass is computed using the particles' area
# (areaParticle = areaCell /number of particles per cell)
ftOptionIni = False

#+++++++++SNOW properties
# density of snow [kg/m³]
rho = 200
# density of entrained snow [kg/m³]
rhoEnt = 100
#+++++Release thickness++++
# True if release thickness should be read from shapefile file; if False - relTh read from ini file
relThFromShp = True
# if a variation on relTh shall be performed add here +- percent and number of steps separated by $
# for example relThPercentVariation=50$10
relThPercentVariation =
# if a variation on relTh shall be performed add here +- absolute value and number of steps separated by $
# for example relThRangeVariation=0.5$10
relThRangeVariation =
# if variation on relTh shall be performed using a normal distribution in number of steps,
# value of buildType (ci95 value), min and max of dist in percent, buildType (ci95 only allowed),
# support (e.g. 10000) all separated by $: e.g. normaldistribution$numberOfSteps$0.3$95$ci95$10000
# if relThFromShp=True ci95 is read from shp file too
relThDistVariation =
# add standard values (ONLY available for options rangeVariation and percentVariation)
addStandardConfig = False
# release thickness (only considered if relThFromShp=False)
relTh =
# read release thickness directly from file (relThFromShp needs to be False)
relThFromFile = False
#+++++Secondary release thickness+++++
# if secRelArea is True - add secondary release area
secRelArea = True
# True if release thickness should be read from shapefile file; if False - secondaryRelTh read from ini file
secondaryRelThFromShp = True
#  if a variation on secondaryRelTh shall be performed add here +- percent and number of steps separated by $
# for example secondaryRelThPercentVariation=50$10
secondaryRelThPercentVariation =
# if a variation on secondaryRelTh shall be performed add here +- absolute value and number of steps separated by $
# for example secondaryRelThRangeVariation=0.5$10
secondaryRelThRangeVariation =
# if variation on secondaryRelTh shall be performed using a normal distribution in number of steps,
# value of buildType (ci95 value), min and max of dist in percent, buildType (ci95 only allowed),
# support (e.g. 10000) all separated by $: e.g. normaldistribution$numberOfSteps$0.3$95$ci95$10000
# if secondaryRelThFromShp=True ci95 is read from shp file too
secondaryRelThDistVariation =
# secondary area release thickness (only considered if secondaryRelThFromShp=False)
secondaryRelTh =
#+++++Entrainment thickness++++
# True if entrainment thickness should be read from shapefile file; if False - entTh read from ini file
entThFromShp = False
# if a variation on entTh shall be performed add here +- percent and number of steps separated by $
# for example entThPercentVariation=50$10
entThPercentVariation = +50$3
# if a variation on entTh shall be performed add here +- absolute value and number of steps separated by $
# for example entThRangeVariation=0.5$10
entThRangeVariation =
# if variation on entTh shall be performed using a normal distribution in number of steps,
# value of buildType (ci95 value), min and max of dist in percent, buildType (ci95 only allowed),
# support (e.g. 10000) all separated by $: e.g. normaldistribution$numberOfSteps$0.3$95$ci95$10000
# if entFromShp=True ci95 is read from shp file too
entThDistVariation =
# entrainment thickness (only considered if entThFromShp=False)
entTh = 0.5

#++++++++++++Time stepping parameters
# fixed time step [s] (also used as first time step when using CFL)
dt = 0.1
# End time [s]
tEnd = 400
# to use a variable time step (time step depends on kernel radius)
sphKernelRadiusTimeStepping = False
# Upper time step limit coefficient if option sphKernelRadiusTimeStepping is chosen.
cMax = 0.02
# stopCriterion (based on massFlowing or kinEnergy)
stopCritType = kinEnergy
# if based on massFlowing, specify the velocity threshold for flowing mass (m/s)
uFlowingThreshold = 0.01
# stopCriterion (stops when massFlowing<0.01*peakMassFlowing or ke<0.01*pke)
stopCrit = 0.01

#+++++++++++++SPH parameters
# SPH gradient option
# 0) No pressure gradients computed
# 1) SamosAT style (no reprojecion on the surface, dz = 0 and gz is used)
# 2) SamosAT done in the cartesian coord system (reprojecion on the surface, dz != 0 and g3 is used)
# 3) SamosAT but done in the local coord system (will hopefully allow us to add the earth pressure coef)
# and this time reprojecion on the surface, dz not 0 and g3 is used
sphOption = 1
# minimum SPH distance [m]
minRKern = 0.001
# sph kernel smoothing length [m]
sphKernelRadius = 5
# Choice of artificial viscosity
# 0) No artificial viscosity
# 1) SAMOS artificial viscosity
# 2) Ata artificial viscosity
viscOption = 1

#++++++++++++++++ Particles
# number of particles defined by: MPPDIR= mass per particle direct, MPPDH= mass per particles through release thickness,
# MPPKR= mass per particles through number of particles per kernel radius
massPerParticleDeterminationMethod = MPPDH
# mass per particle [kg] (if MPPDIR is used)
massPerPart = 1250
# release thickness per particle (if MPPDH is used)
deltaTh = 0.25
# is computed with: nPPK = nPPK0 * (sphKR/sphKR0)^aPPK
# where sphKR is the sphKernelRadius specified further up
# reference kernel radius
sphKR0 = 5
# reference number of particles per kernel radius
nPPK0 = 15
# variation of nppK exponent
aPPK = -1.5
# splitting option
# either split particles based on mass (splitOption = 0)
# or split/merge in order to keep a constant number of particles per kernel radius(splitOption = 1)
splitOption = 0

# if splitOption=0
# threshold for splitting particles, split if: mPart > massPerPart x thresholdMassSplit
thresholdMassSplit = 1.5
# when splitting a particle, the new one is placed at a distance distSplitPart x rPart
distSplitPart = 0.41


# if splitOption=1
# in how many particles do we split
nSplit = 2
# coefficient ruling the splitting of particles. Split if the number of particles per sph kernel radius is smaller
# than cMinNPPK x nPPK
cMinNPPK = 0.25
# coefficient ruling the merging of particles. Merge if the number of particles per sph kernel radius is bigger
# than cMaxNPPK x nPPK
cMaxNPPK = 2.5
# stop splitting if the mass of the particles is lower than cMinMass x massPerPart
cMinMass = 0.25
# stop merging if the mass of the particles is bigger than cMaxnMass x massPerPart
cMaxnMass = 5



#+++++++++++++Mesh and interpolation
# interpolation option
# 3 Options available : -0: nearest neighbour interpolation
#                       -1: equal weights interpolation
#                       -2: bilinear interpolation
interpOption = 2
# minimum flow thickness [m]
hmin = 0.05
# remesh the input DEM or look for remeshed DEM
# expected mesh size [m]
meshCellSize = 5
# threshold under which no remeshing is done
meshCellSizeThreshold = 0.001
# clean DEMremeshed directory to ensure remeshing if cosen meshCellsize is different from DEM in Inputs/
cleanDEMremeshed = True

# Normal computation on rectangular grid
# 4 triangles method        6 triangles method         8 triangles method
# +----U----UR---+---+--... +----+----+----+---+--... +----+----+----+---+--...
# |   /|\   |   /|          |   /| 2 /|   /|          |\ 2 | 3 /|   /|           Y
# |  / | \  |  / |          |  / |  / |  / |          | \  |  / |  / |           ^
# | /  |  \ | /  | /        | /  | /  | /  | /        |  \ | /  | /  | /         |
# |/ 1 | 2 \|/   |/         |/ 1 |/ 3 |/   |/         | 1 \|/ 4 |/   |/          |
# +----P----L----+---+--... +----*----+----+---+--... +----*----+----+----+--... +-----> X
# |\ 4 | 3 /|   /|          | 6 /| 4 /|   /|          | 8 /|\ 5 |   /|
# | \  |  / |  / |          |  / |  / |  / |          |  / | \  |  / |
# |  \ | /  | /  | /        | /  | /  | /  | /        | /  |  \ | /  | /
# |   \|/   |/   |/         |/ 5 |/   |/   |/         |/ 7 | 6 \|/   |/
# +----+----+----+---+--... +----+----+----+---+--... +----+----+----+---+--...
# |   /|   /|   /|          |   /|   /|   /|          |   /|   /|   /|
# 4 Options available : -1: simple cross product method (with the diagonals P-UR and U-L)
#                       -4: 4 triangles method
#                       -6: 6 triangles method
#                       -8: 8 triangles method
methodMeshNormal = 1

#+++++++++++++ Particle reprojection
# 0: project vertically on the dem
# 1: conserve traveled distance during reprojection
# 2 : use samos method (something like an orthogonal reprojection)
# reprojection method used in the computeForceC function (used to find the estimated new particles position)
reprojMethodForce = 2
# reprojection method used in the updatePositionC function (used to reproject the particles after
# updating their position)
reprojMethodPosition = 2
# maximum number of iterations (for method 1 and 2 methods)
reprojectionIterations = 5
# if reprojMethod = 1, specify the stop criterion : stops when error<thresholdProjection*distance
thresholdProjection = 0.001

#+++++++++++++Flow model parameters+++++++++
# subgridMixingFactor
subgridMixingFactor = 100.
# acceleration of gravity [m/s²]
gravAcc = 9.81
velMagMin = 1.0e-6
depMin = 1.0e-6
# take curvature term into account in the gravity acceleration term for computing the friction force
# (and gradient if curvAccInGradient=1)
# 0 if deactivated, 1 if activated
curvAccInFriction = 1
# take curvature term into account in the tangential momentum equation
# 0 if deactivated, 1 if activated
curvAccInTangent = 0
# if curvAccInFriction=1, take curvature term into account in the pressure gradient (if curvAccInGradient=1)
curvAccInGradient = 0

# 0 : use a forward Euler scheme
# 1 : update position using a centered scheme
centeredPosition = 1

#++++++++++++Friction model
# add the friction using an explicit formulation (1)
# 0 use an implicit method
explicitFriction = 0
# friction type (samosAT, Coulomb, Voellmy) - wetSnow only experimental option
frictModel = samosAT
#+++++++++++++General Friction parameters
#+++++++++++++SamosAt friction model
# for small avalanche setup use tau0=140
musamosat = 0.155
tau0samosat = 0
Rs0samosat = 0.222
kappasamosat = 0.43
Rsamosat = 0.05
Bsamosat = 4.13
#+++++++++++++Voellmy friction model
muvoellmy = 0.155
xsivoellmy = 4000.
#+++++++++++++Coulomb friction model
mucoulomb = 0.155
#++++++++++Wet snow friction type
# if wetSnow is chosen, a Voellmy-type friction model with enthalpy dependent mu is used
# set frictModel to wetSnow in the friction model setting
# starting mu0 value
mu0WetSnow = 0.2
# xsiWetSnow
xsiWetSnow = 981.
# reference enthalpy in J/kg to compute the new mu = mu_0 x exp(-enthalpy/enthRef)
enthRef = 20000
# initial temperature in °C
TIni = -10
# initial temperature for entrainment in °C
entTempRef = -10.0
# J/kgK (ice)
cpIce = 2050.0

#++++++++++++ Resistance force parameters
# height of the obstacles
hRes = 10
# resistance coeff
cw = 0.5
# diameter of obstacles
dRes = 0.3
# spacing between obstacles
sres = 5
#++++++++++++ Entrainment Erosion Energy
entEroEnergy = 5000
entShearResistance = 0
entDefResistance = 0

#+++++++++++++++++ Dam Parameters
# the dam foot print is given in Intputs/DAM as a shape file line
# the dam is located on the left side of the dam line
# (when one travels from the first point to the last point of the shapefile dam line)
# use dam?
dam = True
# behavior of the particles when they hit the dam (are they fully reflected: restitutionCoefficient = 1 or only reflected
# along the tangent component of the dam: restitutionCoefficient = 0 or something in between: restitutionCoefficient = 0-1)
restitutionCoefficient = 1
# number of iterations allowed for the interactions between a particle and the dam during one time step:
# 1: particle can only bounce once (may cross the dam at another location then)
nIterDam = 1
# 1 to activate energy loss due to snow flowing over dam
dissDam = 1

# +++++++++++++++ Glide Snow Tool
# this option adds an elastic force between neighbor particles and aims at
# representing slabs for small glide snow avalanches. This could be seen as an elastic cohesion force
# activate cohesion with 1
cohesion = 0
# maximum strain before breaking of the bond
cohesionMaxStrain = 0.2
# threshold to avoid dividing by 0 (similar to minRKern). So we disregard too short bonds
minDistCohesion = 1.0e-3
# cohesive surface tension used as elasticity modulus in N/m²
cohesiveSurfaceTension = 50000


#++++++++++++++ Technical values +++++++++++++
# when checking if a point is within a polygon, one can decide to add a buffer
# arround the polygon (0 means take strictly the points inside, a very small value
# will inclune the points located on the polygon line)
thresholdPointInPoly = 0.001

[TRACKPARTICLES]
# if particles should be tracked - don't forget to specify the "tSteps" you want to
# save further up (for example tStep = 0:1 will lead to tracking patiles every 1 second)
trackParticles = False
# centerTrackPartPoint of the location of the particles to track (x|y coordinates)
centerTrackPartPoint = 2933|-4010
# radius around centerTrackPartPoint (in meters)
radius = 5
# particle properties to be tracked (the following properties are always
# tracked: x, y, z, ux, uy, uz, but more can be added in particleProperties)
particleProperties =

[VISUALISATION]
# if particle properties shall be exported to csv files - requires to save particles in OUTPUTS
writePartToCSV = False
# particle properties to be saved to csv (options: ux, uy, uz, velocityMagnitude,..)
particleProperties = velocityMagnitude|m
# create data required for range-time diagram of simulation results -
# additional configurations in ana5Utils - distanceTimeAnalysisCfg
createRangeTimeDiagram = False
# if TTdiagram=True - save data for thalweg-time diagram,
# if False for range-time diagram with radar field of view
TTdiagram = True
# scenario name - can be used for plotting
scenario =


[INPUT]
# specify a particular release area scenario, provide name of shapefile with or without extension .shp (optional)
releaseScenario =


[REPORT]
# which result parameters shall be included as plots in report,  - separated by |
plotFields = ppr|pft|pfv
# units for output variables
unitppr = kPa
unitpft = m
unitpfv = ms-1
