### Config File - This file contains the main settings for the energy line test module
## Set your parameters
# This file will be overridden by local_energyLineTestCfg.ini if it exists
# So copy this file to local_energyLineTestCfg.ini, adjust your variables there

[energyLineTest]
# do you want to run the DFA module (all results in the Outputs/com1DFA forlder will be deleted)
runDFAModule = True
# for extending the path at the bottom, use the last points of the mass average path to get the slope
# (all points at a distance nCellsMinExtend x cellSize < distance from the end)
nCellsExtrapolation = 1
# plot the mass averaged points function of the corrected s too (only available if pathFromPart = True)
plotScor = False

# True to get the path from particles, from fields otherwise
# if True, particles need to be saved in resType
# if False, FT|FV|FM need to be saved in resType
pathFromPart = True

[com1DFA_override]
# use default com1DFA config as base configuration (True) and override following parameters
# if False and local is available use local
defaultConfig = True
#++++++++++++++++ Simulation type
# list of simulations that shall be performed (null, ent, res, entres, available (use all available input data))
simTypeList = null

#+++++++++++++ Output++++++++++++
# desired result Parameters (ppr, pft, pfv, pta, FT, FV, P, Vx, Vy, Vz, TA, particles) - separated by |
resType = particles
# saving time step, i.e.  time in seconds (first and last time step are always saved)
# option 1: give an interval with start:interval in seconds (tStep = 0:5 - this will save desired results every 5 seconds for the full simulation)
# option 2: explicitly list all desired time steps (closest to actual computational time step) separated by | (example tSteps = 1|50.2|100)
# NOTE: initial and last time step are always saved!
tSteps = 0:1

#+++++++++SNOW properties
#+++++Release thickness++++
# True if release thickness should be read from shapefile file; if False - relTh read from ini file
relThFromShp = False
# release thickness (only considered if relThFromShp=False)
relTh = 1

#++++++++++++Time stepping parameters
# End time [s]
tEnd = 400
# to use a variable time step (time step depends on kernel radius)
sphKernelRadiusTimeStepping = True
# courant number
cMax = 0.02
# stopCriterion (based on massFlowing or kinEnergy)
stopCritType = massFlowing
# if based on massFlowing, specify the velocity threshold for flowing mass (m/s)
uFlowingThreshold = 0.0
# stopCriterion (stops when massFlowing<0.01*peakMassFlowing or ke<0.01*pke)
stopCrit = 0.0

#+++++++++++++SPH parameters
# SPH gradient option
# 0) No pressure gradients computed
# 1) SamosAT style (no reprojecion on the surface, dz = 0 and gz is used)
# 2) SamosAT done in the cartesian coord system (reprojecion on the surface, dz != 0 and g3 is used)
# 3) SamosAT but done in the local coord system (will hopefully allow us to add the earth pressure coef)
# and this time reprojecion on the surface, dz not 0 and g3 is used
sphOption = 0
# sph kernel smoothing length [m]
sphKernelRadius = 5
# Choice of artificial viscosity
# 0) No artificial viscosity
# 1) SAMOS artificial viscosity
# 2) Ata artificial viscosity
viscOption = 0

#++++++++++++++++ Particles
# number of particles defined by: MPPDIR= mass per particle direct, MPPDH= mass per particles through release thickness,
# MPPKR= mass per particles through number of particles per kernel radius
massPerParticleDeterminationMethod = MPPKR
# is computed with: nPPK = nPPK0 * (sphKR/sphKR0)^aPPK
# where sphKR is the sphKernelRadius specified further up
# reference kernel radius
sphKR0 = 5
# reference number of particles per kernel radius
nPPK0 = 1
# variation of nppK exponent
aPPK = -1

# if splitOption=0
# threshold for splitting particles, split if: mPart > massPerPart x thresholdMassSplit
thresholdMassSplit = 5

#+++++++++++++Mesh and interpolation
# remesh the input DEM
# expected mesh size [m]
meshCellSize = 5



#+++++++++++++Flow model parameters+++++++++
# subgridMixingFactor
subgridMixingFactor = 10.
# curvature acceleration coefficient
# take curvature term into account in the gravity acceleration term for computing the friction force
# (and gradient if curvAccInGradient=1)
# 0 if deactivated, 1 if activated
curvAccInFriction = 0
# take curvature term into account in the tangential momentum equation
# 0 if deactivated, 1 if activated
curvAccInTangent = 0
# if curvAccInFriction=1, take curvature term into account in the pressure gradient (if curvAccInGradient=1)
curvAccInGradient = 0

#++++++++++++Friction model
# add the friction using an explicit formulation (1)
# 0 use an implicit method
explicitFriction = 1
# friction type (samosAT, Coulomb, Voellmy)
frictModel = Coulomb
#+++++++++++++General Friction parameters
# tan of bed friction angle used for: samosAT, Coulomb, Voellmy
mucoulomb = 0.4

dam = False
