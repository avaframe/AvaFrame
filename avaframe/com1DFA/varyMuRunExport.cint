int MAXSTRLEN = 512;

void chomp(char str[]) {
  int p;
  p=strlen(str);
  str[p-1]="";
}

int running(char project_dir[],char sim_name[]) {
  char status[10];
  FILE *status_file;
  char file_name[512];

  // in .simulation_status, status is saved to folder of respective
  // simulation: "started", "running", "finished"

  sprintf(file_name,"%s/Project/Simulations/%s/.simulation_status",
          project_dir,sim_name);
  printf("-----------%s\n",file_name);
  status_file=fopen(file_name,"r");

  if(NULL == status_file) {
    printf("could not open file!\n");
    return 2;
  }
  //read first line of file
  fgets(status, 10, status_file);

  chomp(status);

  if(strcmp("finished", status) == 0)
    {
      printf("finished\n");
      fclose(status_file);
      return 0;
    }
  else
    {
      printf("Status: %s \n",status);
      fclose(status_file);
      return 1;
    }
}


///////////////////////////////////////////////////////////////////////////////
// postprocessing of simulation runs

void postprocessing(char ResultDir[], char SimName[], float Mu){

    char name[512];
    char MuString[512];
    char ResultDir_rep[512];

    // Prepare for postprocessing
    sprintf(name,"Project/Simulations/%s",SimName);

    // Generate a full report
    sprintf(MuString,"%.3f",Mu);
    sprintf(ResultDir_rep,"%s/FullOutput_mu_%s",ResultDir,MuString);
    if(make_directory(ResultDir_rep)){ set_error("cannot create report directory"); return;}
    printf("\n[BatchSamos] Report is saved to %s \n",ResultDir_rep);
    sprintf(name,"Project/Simulations/%s",SimName);
    set(name, "set_report_directory", ResultDir_rep);
    set(name, "generate_report", "");


}

///////////////////////////////////////////////////////////////////////////////
// Run calls for simulations

void RunExport(char BasePath[], char SamosProjectDir[], char ResDir[], int countRel)
{
  char ProjDir[512];
  char s[1000*MAXSTRLEN];
  char CuSim[512];
  char Sim[512];
  char Parameter[512];
  char FPath[512];
  char F2Path[512];
  char ParFilePath[512];
  char output_name[512];
  char ResultDir[512];
  int Status;
  int NSims;
  int NRelAreas;
  int i, j;
  float IsEof=0;
  int ExpCount;
  float Mu, MuST, Xsi;
  float Tau0;
  FILE *ParameterFile;
  FILE *ExpLog;
  FILE *ExpLog2;

  // Load project
  sprintf(ProjDir, "%s/%s", BasePath, SamosProjectDir);
  set("", "ProjectDir", ProjDir);
  set("", "LoadProject", ProjDir);

  // Open experiment log file
  sprintf(FPath, "%s_ExpLog.txt", ProjDir);
  ExpLog = fopen(FPath,"w");
  printf("\n[BatchSamos] ExpLog %s\n",FPath);
  fprintf(ExpLog, "N;SimName;mu\n");
  // Open second experiment log file for postprocessing
  sprintf(F2Path, "%s/ExpLog.txt", ResDir);
  ExpLog2 = fopen(F2Path,"a");
  printf("\n[BatchSamos] Full ExpLog %s\n",F2Path);


  // Count Simulation runs
  ExpCount = countRel;

  // Simulations
  get("Project/Simulations", "GetComponentList", s);
  NSims = list_size(s);

  // Perform simulations
  for(i = 0; i < NSims; i++) {
    get_list_element(s, i, CuSim);
    sprintf(Sim,"Project/Simulations/%s",CuSim);
    printf("\n[BatchSamos] -------------------------\n");
    printf("\n[BatchSamos] Current Sim %s\n",Sim);

    // If simulation with entrainment and resistance then run
    if (istrstr(CuSim,"entres")>0){

      MuST = 0.155;
      printf("\n[BatchSamos] Computing %s with standard Mu=%f\n",CuSim,MuST);

      // Update log
      fprintf(ExpLog, "%d;%s;%f\n",ExpCount,CuSim,MuST);
      fprintf(ExpLog2, "%d  %s  %f\n",ExpCount,CuSim,MuST);


      //------------Set time stepping--------------------
      set(Sim, "EndTime", "150");
      set(Sim, "DeltaOut", "20");

      // *************Start processing************************
      set("", "SaveProject", "");
      set(Sim, "DeactivateLoadingPsaResults", "");
      set(Sim, "LoadProject", "");
      set(Sim, "Run", "");

      // Postprocessing with mu set to the std default 0.155
      postprocessing(ResDir,CuSim,MuST);

    }
    // else perform simulation without entrainment and resistance but parameter variations
    else {

        // TEST IF DIFFERENCE
      set(Sim, "FrictionType", "samosAT_Standard");

      //------------Set time stepping---------------------
      //set(Sim, "EndTime", "40");
      // set(Sim, "DeltaOut", "20");

      // Open Mu file
      sprintf(ParFilePath, "%s_VarMu.txt", ProjDir);
      ParameterFile=fopen(ParFilePath,"r");
      if(NULL == ParameterFile) {
        printf("[BatchSamos ERROR] File '%s not found!\n",ParFilePath);
        return;
      }

      // Loop through all parameter lines
      IsEof = 0;
      while(IsEof==0) {

        // Read Mu from file
        fscanf(ParameterFile,"%f\n",Mu);
        sprintf(Parameter,"tau0=0.0 mue=%f Rs0=0.222 kappa=0.43 R=0.05 B=4.13",Mu);
        set(Sim, "FormulaParameters", Parameter);
        get(Sim, "FormulaParameters", Parameter);
        printf("[BatchSamos] Computing %s with Mu=%f\n",CuSim,Mu);

        // Set Expcount and update log
        ExpCount++;
        fprintf(ExpLog, "%d;%s;%f\n",ExpCount,CuSim,Mu);
        fprintf(ExpLog2, "%d  %s  %f\n",ExpCount,CuSim,Mu);


        //------------- start processing
        set("", "SaveProject", "");
        printf("[BatchSamos] Computing %s; Sim # %d. ; Mu %f \n",CuSim,ExpCount,Mu);
        set(Sim, "DeactivateLoadingPsaResults", "");
        set(Sim, "LoadProject", "");
        set(Sim, "Run", "");

        //------------- postprocessing
        postprocessing(ResDir,CuSim,Mu);

        if (feof(ParameterFile))
          {
            IsEof=1;
          }
      } // End of variation file loop

      fclose(ParameterFile);
    } // End of simulation loop
  }

  fclose(ExpLog);
  fclose(ExpLog2);

  // Save project
  set("", "SaveProject", "");
  set("", "Close", "");

}

// ################################# main #####################################
int main()
{
  char BasePath[512];
  char SamosProjectDir[512];
  char ResDir[512];
  char countRelStr[512];
  int countRel;

  // --- Setup
  strcpy(BasePath, "##BASEPATH##");
  strcpy(SamosProjectDir, "##PROJECTDIR##");
  strcpy(ResDir, "##RESDIR##");
  strcpy(countRelStr, "##COUNTREL##");

  // Setup total number of simulations for file naming
  countRel = atoi(countRelStr);

  printf("[BatchSamos] Number of total sims now %d \n",countRel);

  // --- Calls
  RunExport(BasePath, SamosProjectDir, ResDir, countRel);


  printf("[BatchSamos] Project %s done\n", SamosProjectDir);
  return 0;

}
